To synchronize the agent and four smokers, I created two solutions: one using semaphores and the other using pthread libraries. 

For the first solution, I used semaphores to make sure that the agent and smokers go at appropriate times. That is, the smokers go to sleep immediately, the agent puts two random ingredients, and the appropriate smoker who has the remaining ingredient then makes and smokes a cigarette, and signals the agent on completion – this is all done through multiple semaphores. A file is used in the semaphore approach to keep track of the number of attempts left for the agent at any given time. The semaphores are created, wait, signaled, and killed appropriately.

In the thread approach, two routines are used: agent and smoker. Multiple threads are created for the agent (1 thread) and smokers (3 threads). Mutex locks are used to make sure that the appropriate agent or smoker is going at any given time. That is, the smokers go to sleep immediately, the agent puts two random ingredients, and the appropriate smoker who has the remaining ingredient then makes and smokes a cigarette, and signals the agent on completion – this is all done through multiple mutex locks. The mutex locks are initialized, locked, unlocked, and destroyed appropriately. The threads are created and joined appropriately.
